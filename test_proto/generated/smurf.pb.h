// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smurf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smurf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smurf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smurf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smurf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smurf_2eproto;
namespace examplepb {
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_Location;
struct Person_LocationDefaultTypeInternal;
extern Person_LocationDefaultTypeInternal _Person_Location_default_instance_;
}  // namespace examplepb
PROTOBUF_NAMESPACE_OPEN
template<> ::examplepb::Person* Arena::CreateMaybeMessage<::examplepb::Person>(Arena*);
template<> ::examplepb::Person_Location* Arena::CreateMaybeMessage<::examplepb::Person_Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace examplepb {

enum MyEnum : int {
  foo = 0,
  bar = 1,
  MyEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MyEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MyEnum_IsValid(int value);
constexpr MyEnum MyEnum_MIN = foo;
constexpr MyEnum MyEnum_MAX = bar;
constexpr int MyEnum_ARRAYSIZE = MyEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MyEnum_descriptor();
template<typename T>
inline const std::string& MyEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MyEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MyEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MyEnum_descriptor(), enum_t_value);
}
inline bool MyEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MyEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MyEnum>(
    MyEnum_descriptor(), name, value);
}
// ===================================================================

class Person_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:examplepb.Person.Location) */ {
 public:
  inline Person_Location() : Person_Location(nullptr) {}
  ~Person_Location() override;
  explicit PROTOBUF_CONSTEXPR Person_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person_Location(const Person_Location& from);
  Person_Location(Person_Location&& from) noexcept
    : Person_Location() {
    *this = ::std::move(from);
  }

  inline Person_Location& operator=(const Person_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Location& operator=(Person_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person_Location* internal_default_instance() {
    return reinterpret_cast<const Person_Location*>(
               &_Person_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person_Location& a, Person_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person_Location& from) {
    Person_Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "examplepb.Person.Location";
  }
  protected:
  explicit Person_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1 [(.validate.rules) = {
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2 [(.validate.rules) = {
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:examplepb.Person.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_smurf_2eproto;
};
// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:examplepb.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit PROTOBUF_CONSTEXPR Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "examplepb.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Person_Location Location;

  // accessors -------------------------------------------------------

  enum : int {
    kAstringFieldNumber = 9,
    kAbytesFieldNumber = 10,
    kHomeFieldNumber = 4,
    kAmsgFieldNumber = 12,
    kIdFieldNumber = 1,
    kAuint64FieldNumber = 5,
    kAint64FieldNumber = 6,
    kAuint32FieldNumber = 7,
    kAint32FieldNumber = 8,
    kAenumFieldNumber = 11,
  };
  // optional string astring = 9 [(.validate.rules) = {
  bool has_astring() const;
  private:
  bool _internal_has_astring() const;
  public:
  void clear_astring();
  const std::string& astring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_astring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_astring();
  PROTOBUF_NODISCARD std::string* release_astring();
  void set_allocated_astring(std::string* astring);
  private:
  const std::string& _internal_astring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_astring(const std::string& value);
  std::string* _internal_mutable_astring();
  public:

  // optional bytes abytes = 10 [(.validate.rules) = {
  bool has_abytes() const;
  private:
  bool _internal_has_abytes() const;
  public:
  void clear_abytes();
  const std::string& abytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abytes();
  PROTOBUF_NODISCARD std::string* release_abytes();
  void set_allocated_abytes(std::string* abytes);
  private:
  const std::string& _internal_abytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abytes(const std::string& value);
  std::string* _internal_mutable_abytes();
  public:

  // .examplepb.Person.Location home = 4 [(.validate.rules) = {
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::examplepb::Person_Location& home() const;
  PROTOBUF_NODISCARD ::examplepb::Person_Location* release_home();
  ::examplepb::Person_Location* mutable_home();
  void set_allocated_home(::examplepb::Person_Location* home);
  private:
  const ::examplepb::Person_Location& _internal_home() const;
  ::examplepb::Person_Location* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::examplepb::Person_Location* home);
  ::examplepb::Person_Location* unsafe_arena_release_home();

  // .examplepb.Person.Location amsg = 12 [(.validate.rules) = {
  bool has_amsg() const;
  private:
  bool _internal_has_amsg() const;
  public:
  void clear_amsg();
  const ::examplepb::Person_Location& amsg() const;
  PROTOBUF_NODISCARD ::examplepb::Person_Location* release_amsg();
  ::examplepb::Person_Location* mutable_amsg();
  void set_allocated_amsg(::examplepb::Person_Location* amsg);
  private:
  const ::examplepb::Person_Location& _internal_amsg() const;
  ::examplepb::Person_Location* _internal_mutable_amsg();
  public:
  void unsafe_arena_set_allocated_amsg(
      ::examplepb::Person_Location* amsg);
  ::examplepb::Person_Location* unsafe_arena_release_amsg();

  // uint64 id = 1 [(.validate.rules) = {
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 auint64 = 5 [(.validate.rules) = {
  bool has_auint64() const;
  private:
  bool _internal_has_auint64() const;
  public:
  void clear_auint64();
  uint64_t auint64() const;
  void set_auint64(uint64_t value);
  private:
  uint64_t _internal_auint64() const;
  void _internal_set_auint64(uint64_t value);
  public:

  // optional int64 aint64 = 6 [(.validate.rules) = {
  bool has_aint64() const;
  private:
  bool _internal_has_aint64() const;
  public:
  void clear_aint64();
  int64_t aint64() const;
  void set_aint64(int64_t value);
  private:
  int64_t _internal_aint64() const;
  void _internal_set_aint64(int64_t value);
  public:

  // optional uint32 auint32 = 7 [(.validate.rules) = {
  bool has_auint32() const;
  private:
  bool _internal_has_auint32() const;
  public:
  void clear_auint32();
  uint32_t auint32() const;
  void set_auint32(uint32_t value);
  private:
  uint32_t _internal_auint32() const;
  void _internal_set_auint32(uint32_t value);
  public:

  // optional int32 aint32 = 8 [(.validate.rules) = {
  bool has_aint32() const;
  private:
  bool _internal_has_aint32() const;
  public:
  void clear_aint32();
  int32_t aint32() const;
  void set_aint32(int32_t value);
  private:
  int32_t _internal_aint32() const;
  void _internal_set_aint32(int32_t value);
  public:

  // optional .examplepb.MyEnum aenum = 11 [(.validate.rules) = {
  bool has_aenum() const;
  private:
  bool _internal_has_aenum() const;
  public:
  void clear_aenum();
  ::examplepb::MyEnum aenum() const;
  void set_aenum(::examplepb::MyEnum value);
  private:
  ::examplepb::MyEnum _internal_aenum() const;
  void _internal_set_aenum(::examplepb::MyEnum value);
  public:

  // @@protoc_insertion_point(class_scope:examplepb.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr astring_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abytes_;
    ::examplepb::Person_Location* home_;
    ::examplepb::Person_Location* amsg_;
    uint64_t id_;
    uint64_t auint64_;
    int64_t aint64_;
    uint32_t auint32_;
    int32_t aint32_;
    int aenum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_smurf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person_Location

// double lat = 1 [(.validate.rules) = {
inline void Person_Location::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Person_Location::_internal_lat() const {
  return _impl_.lat_;
}
inline double Person_Location::lat() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.Location.lat)
  return _internal_lat();
}
inline void Person_Location::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Person_Location::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.Location.lat)
}

// double lng = 2 [(.validate.rules) = {
inline void Person_Location::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Person_Location::_internal_lng() const {
  return _impl_.lng_;
}
inline double Person_Location::lng() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.Location.lng)
  return _internal_lng();
}
inline void Person_Location::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Person_Location::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.Location.lng)
}

// -------------------------------------------------------------------

// Person

// uint64 id = 1 [(.validate.rules) = {
inline void Person::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Person::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Person::id() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Person::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.id)
}

// .examplepb.Person.Location home = 4 [(.validate.rules) = {
inline bool Person::_internal_has_home() const {
  return this != internal_default_instance() && _impl_.home_ != nullptr;
}
inline bool Person::has_home() const {
  return _internal_has_home();
}
inline void Person::clear_home() {
  if (GetArenaForAllocation() == nullptr && _impl_.home_ != nullptr) {
    delete _impl_.home_;
  }
  _impl_.home_ = nullptr;
}
inline const ::examplepb::Person_Location& Person::_internal_home() const {
  const ::examplepb::Person_Location* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::examplepb::Person_Location&>(
      ::examplepb::_Person_Location_default_instance_);
}
inline const ::examplepb::Person_Location& Person::home() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.home)
  return _internal_home();
}
inline void Person::unsafe_arena_set_allocated_home(
    ::examplepb::Person_Location* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:examplepb.Person.home)
}
inline ::examplepb::Person_Location* Person::release_home() {
  
  ::examplepb::Person_Location* temp = _impl_.home_;
  _impl_.home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::examplepb::Person_Location* Person::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:examplepb.Person.home)
  
  ::examplepb::Person_Location* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::examplepb::Person_Location* Person::_internal_mutable_home() {
  
  if (_impl_.home_ == nullptr) {
    auto* p = CreateMaybeMessage<::examplepb::Person_Location>(GetArenaForAllocation());
    _impl_.home_ = p;
  }
  return _impl_.home_;
}
inline ::examplepb::Person_Location* Person::mutable_home() {
  ::examplepb::Person_Location* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:examplepb.Person.home)
  return _msg;
}
inline void Person::set_allocated_home(::examplepb::Person_Location* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.home_;
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(home);
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.home_ = home;
  // @@protoc_insertion_point(field_set_allocated:examplepb.Person.home)
}

// optional uint64 auint64 = 5 [(.validate.rules) = {
inline bool Person::_internal_has_auint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person::has_auint64() const {
  return _internal_has_auint64();
}
inline void Person::clear_auint64() {
  _impl_.auint64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Person::_internal_auint64() const {
  return _impl_.auint64_;
}
inline uint64_t Person::auint64() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.auint64)
  return _internal_auint64();
}
inline void Person::_internal_set_auint64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auint64_ = value;
}
inline void Person::set_auint64(uint64_t value) {
  _internal_set_auint64(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.auint64)
}

// optional int64 aint64 = 6 [(.validate.rules) = {
inline bool Person::_internal_has_aint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Person::has_aint64() const {
  return _internal_has_aint64();
}
inline void Person::clear_aint64() {
  _impl_.aint64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t Person::_internal_aint64() const {
  return _impl_.aint64_;
}
inline int64_t Person::aint64() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.aint64)
  return _internal_aint64();
}
inline void Person::_internal_set_aint64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aint64_ = value;
}
inline void Person::set_aint64(int64_t value) {
  _internal_set_aint64(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.aint64)
}

// optional uint32 auint32 = 7 [(.validate.rules) = {
inline bool Person::_internal_has_auint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Person::has_auint32() const {
  return _internal_has_auint32();
}
inline void Person::clear_auint32() {
  _impl_.auint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Person::_internal_auint32() const {
  return _impl_.auint32_;
}
inline uint32_t Person::auint32() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.auint32)
  return _internal_auint32();
}
inline void Person::_internal_set_auint32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auint32_ = value;
}
inline void Person::set_auint32(uint32_t value) {
  _internal_set_auint32(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.auint32)
}

// optional int32 aint32 = 8 [(.validate.rules) = {
inline bool Person::_internal_has_aint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Person::has_aint32() const {
  return _internal_has_aint32();
}
inline void Person::clear_aint32() {
  _impl_.aint32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Person::_internal_aint32() const {
  return _impl_.aint32_;
}
inline int32_t Person::aint32() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.aint32)
  return _internal_aint32();
}
inline void Person::_internal_set_aint32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.aint32_ = value;
}
inline void Person::set_aint32(int32_t value) {
  _internal_set_aint32(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.aint32)
}

// optional string astring = 9 [(.validate.rules) = {
inline bool Person::_internal_has_astring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_astring() const {
  return _internal_has_astring();
}
inline void Person::clear_astring() {
  _impl_.astring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::astring() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.astring)
  return _internal_astring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_astring(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.astring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:examplepb.Person.astring)
}
inline std::string* Person::mutable_astring() {
  std::string* _s = _internal_mutable_astring();
  // @@protoc_insertion_point(field_mutable:examplepb.Person.astring)
  return _s;
}
inline const std::string& Person::_internal_astring() const {
  return _impl_.astring_.Get();
}
inline void Person::_internal_set_astring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.astring_.Set(value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_astring() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.astring_.Mutable(GetArenaForAllocation());
}
inline std::string* Person::release_astring() {
  // @@protoc_insertion_point(field_release:examplepb.Person.astring)
  if (!_internal_has_astring()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.astring_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.astring_.IsDefault()) {
    _impl_.astring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Person::set_allocated_astring(std::string* astring) {
  if (astring != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.astring_.SetAllocated(astring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.astring_.IsDefault()) {
    _impl_.astring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:examplepb.Person.astring)
}

// optional bytes abytes = 10 [(.validate.rules) = {
inline bool Person::_internal_has_abytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person::has_abytes() const {
  return _internal_has_abytes();
}
inline void Person::clear_abytes() {
  _impl_.abytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::abytes() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.abytes)
  return _internal_abytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_abytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.abytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:examplepb.Person.abytes)
}
inline std::string* Person::mutable_abytes() {
  std::string* _s = _internal_mutable_abytes();
  // @@protoc_insertion_point(field_mutable:examplepb.Person.abytes)
  return _s;
}
inline const std::string& Person::_internal_abytes() const {
  return _impl_.abytes_.Get();
}
inline void Person::_internal_set_abytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.abytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_abytes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.abytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Person::release_abytes() {
  // @@protoc_insertion_point(field_release:examplepb.Person.abytes)
  if (!_internal_has_abytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.abytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abytes_.IsDefault()) {
    _impl_.abytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Person::set_allocated_abytes(std::string* abytes) {
  if (abytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.abytes_.SetAllocated(abytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abytes_.IsDefault()) {
    _impl_.abytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:examplepb.Person.abytes)
}

// optional .examplepb.MyEnum aenum = 11 [(.validate.rules) = {
inline bool Person::_internal_has_aenum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Person::has_aenum() const {
  return _internal_has_aenum();
}
inline void Person::clear_aenum() {
  _impl_.aenum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::examplepb::MyEnum Person::_internal_aenum() const {
  return static_cast< ::examplepb::MyEnum >(_impl_.aenum_);
}
inline ::examplepb::MyEnum Person::aenum() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.aenum)
  return _internal_aenum();
}
inline void Person::_internal_set_aenum(::examplepb::MyEnum value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.aenum_ = value;
}
inline void Person::set_aenum(::examplepb::MyEnum value) {
  _internal_set_aenum(value);
  // @@protoc_insertion_point(field_set:examplepb.Person.aenum)
}

// .examplepb.Person.Location amsg = 12 [(.validate.rules) = {
inline bool Person::_internal_has_amsg() const {
  return this != internal_default_instance() && _impl_.amsg_ != nullptr;
}
inline bool Person::has_amsg() const {
  return _internal_has_amsg();
}
inline void Person::clear_amsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.amsg_ != nullptr) {
    delete _impl_.amsg_;
  }
  _impl_.amsg_ = nullptr;
}
inline const ::examplepb::Person_Location& Person::_internal_amsg() const {
  const ::examplepb::Person_Location* p = _impl_.amsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::examplepb::Person_Location&>(
      ::examplepb::_Person_Location_default_instance_);
}
inline const ::examplepb::Person_Location& Person::amsg() const {
  // @@protoc_insertion_point(field_get:examplepb.Person.amsg)
  return _internal_amsg();
}
inline void Person::unsafe_arena_set_allocated_amsg(
    ::examplepb::Person_Location* amsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amsg_);
  }
  _impl_.amsg_ = amsg;
  if (amsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:examplepb.Person.amsg)
}
inline ::examplepb::Person_Location* Person::release_amsg() {
  
  ::examplepb::Person_Location* temp = _impl_.amsg_;
  _impl_.amsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::examplepb::Person_Location* Person::unsafe_arena_release_amsg() {
  // @@protoc_insertion_point(field_release:examplepb.Person.amsg)
  
  ::examplepb::Person_Location* temp = _impl_.amsg_;
  _impl_.amsg_ = nullptr;
  return temp;
}
inline ::examplepb::Person_Location* Person::_internal_mutable_amsg() {
  
  if (_impl_.amsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::examplepb::Person_Location>(GetArenaForAllocation());
    _impl_.amsg_ = p;
  }
  return _impl_.amsg_;
}
inline ::examplepb::Person_Location* Person::mutable_amsg() {
  ::examplepb::Person_Location* _msg = _internal_mutable_amsg();
  // @@protoc_insertion_point(field_mutable:examplepb.Person.amsg)
  return _msg;
}
inline void Person::set_allocated_amsg(::examplepb::Person_Location* amsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.amsg_;
  }
  if (amsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(amsg);
    if (message_arena != submessage_arena) {
      amsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.amsg_ = amsg;
  // @@protoc_insertion_point(field_set_allocated:examplepb.Person.amsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace examplepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::examplepb::MyEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::examplepb::MyEnum>() {
  return ::examplepb::MyEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smurf_2eproto
